-------------
P2PApp _readme.txt
Author: Steve Koscho
Date: 1/20/2017

-------------
- There is an HTML file that needs to be extracted to a folder to display
  correctly (if in a .zip file, the HTML won't be able to display pictures)

- The project was built and run on NetBeans IDE 8.2

-------------
P2PAppMain
 - has a test app, you have to change 1 line of code and re-run to
   test different topologies defined in the tables

P2PNode
 - root object, this entire thing runs as a network of nodes as separate
   threads within 1 process for testing

   It is presently setup to run in test mode launching many nodes

P2PConnectionReadThread
  - services reads for all sockets this node opens or accepts

P2PListenerThread
  - listens for connections from other nodes and hands it off to a new
    the reader thread

P2PPingerThread
  - sends out PING's at some frequency

P2PRoutings
  - figures out how to build the routing tables by matching up sends and
    receives with which socket they were read from and sent to (see the design
    HTML checked in with this code)

P2PReceivedMessageCache
  - remember the past N messages received and if we see a repeat, drop it

P2PMessage
  - encodes and decodes between message objects and byte[] arrays as specified
    by the project

P2PMessageIO
  - static methods to send() and ReadAndDispatch()


-------------
-------------

Remaining TODO:

- command line args to make to choose any type of logging
    { log_send, log_receive, log_routes, log_floods, log_forwards, log_trace }

- review and fix all logging in catch() code, currently it is the default
  catch handling generated by netbeans

- options for testing such as -disable_dup_msg_trap -floodListSize
  -maxPacketSize, etc.

- The implementation for notification of readComplete() needs more work,
  need a class ReadCompletion that app uses - presently, the test app is
  implementing the readComplete() but it only has 1 for the app. There
  should be a new ReadCompletion object for each REQUEST issued instead.

- Part2 of the project needs to be done:
    Send a REQUEST and have the REPLY be an HTML page with the routing table
    for the node requested

- MAX_PAYLOAD and the code within read_next_packet() needs work to handle
  large RESPONSE payloads.  Currently it only handles protocol headers and the
  current test case returns back a 5 byte payload which fits. (did this on
  purpose). This change is TBD with part 2 features.
